#!/usr/bin/python -u


""" Generate /etc/sysconfig/nftables-allowed-ipv4.conf
         and /etc/sysconfig/nftables-allowed-ipv6.conf
By default only connections from Cloudflare IP allowed
"""


__contact__ = 'https://github.com/makhomed/nftables-tool'
__license__ = 'GNU General Public License version 3'
__version__ = '1.2.1'


# includes {{{

import ipaddress
import json
import secrets
import sys
from functools import wraps
from pathlib import Path

from invoke import run

from jinja2 import BaseLoader, Environment

import requests

# }}}


# check for valid python version {{{

how_to_install_python_version_3_11 = """
# how to install Python 3.11 and required packages:

dnf -y remove python-unversioned-command ; \\
dnf -y install python3.11 python3.11-pip ; \\
ln -sf /usr/bin/python3.11 /usr/bin/python ; \\
ln -sf /usr/bin/pip3.11 /usr/bin/pip ; \\
pip install --no-input --upgrade-strategy eager --upgrade Jinja2 requests invoke
"""

is_vaid_python_version = sys.version_info.major == 3 and sys.version_info.minor >= 11 or sys.version_info.major > 3
if not is_vaid_python_version:
    current_version = f'{sys.version_info.major}.{sys.version_info.minor}'
    sys.exit(f'\n# FATAL ERROR: Python 3.11+ required, used Python {current_version}\n{how_to_install_python_version_3_11}')

# }}}


# atomic_write_text function {{{

def atomic_write_text(content, filename):
    assert isinstance(content, str)
    assert isinstance(filename, Path)
    tmp_filename = filename.with_name(filename.name + '.tmp.' + secrets.token_hex() + '.tmp')
    tmp_filename.write_text(content)
    tmp_filename.rename(filename)

# }}}


# Cloudflare API {{{

def retry(max_retries=8, min_delay=1, backoff=2, max_delay=128):
    def decorator(func):
        @wraps(func)
        def wrapped_function(*args, **kwargs):
            last_exception = None
            delay = min_delay
            retries = 0
            while retries < max_retries:
                try:
                    return func(*args, **kwargs)
                except Exception as exception:
                    last_exception = exception
                    import traceback
                    traceback.print_exc()
                    print(f'\n{retries+1} function call {func.__name__} failed. Will retry after delay {delay} seconds...\n')
                    import time
                    time.sleep(delay)
                    delay *= backoff
                    if delay > max_delay:
                        delay = max_delay
                    retries += 1
            raise last_exception
        return wrapped_function
    return decorator


@retry()
def api_cloudlare_get_ips():
    requests_connect_timeout = 10
    requests_read_timeout = 10
    url = 'https://api.cloudflare.com/client/v4/ips'
    timeout = (requests_connect_timeout, requests_read_timeout)
    headers = {'Accept': 'application/json'}
    params = {'networks': 'jdcloud'}
    r = requests.get(url, params=params, headers=headers, timeout=timeout)
    assert r.status_code == 200, f'r.status_code == {r.status_code}'
    data = json.loads(r.text)
    success = data['success']
    errors = data['errors']
    messages = data['messages']
    result = data['result']
    assert success is True, f'success is {success}'
    assert isinstance(errors, list) and not errors, f'errors is {errors}'
    assert isinstance(messages, list) and not messages, f'messages is {messages}'
    return result

# }}}


# set_cloudflare_subnets function {{{

cloudflare_ipv4_subnets = None
cloudflare_ipv6_subnets = None
cloudflare_china_ipv4_subnets = None
cloudflare_china_ipv6_subnets = None


def set_cloudflare_subnets():
    global cloudflare_ipv4_subnets
    global cloudflare_ipv6_subnets
    global cloudflare_china_ipv4_subnets
    global cloudflare_china_ipv6_subnets
    cloudflare_ipv4_subnets = list()
    cloudflare_ipv6_subnets = list()
    cloudflare_china_ipv4_subnets = list()
    cloudflare_china_ipv6_subnets = list()
    result = api_cloudlare_get_ips()
    for ipv4_cidr in result['ipv4_cidrs']:
        cloudflare_ipv4_subnets.append(ipaddress.IPv4Network(ipv4_cidr, strict=True))
    for ipv6_cidr in result['ipv6_cidrs']:
        cloudflare_ipv6_subnets.append(ipaddress.IPv6Network(ipv6_cidr, strict=True))
    for jdcloud_cidr in result['jdcloud_cidrs']:
        ip_network = ipaddress.ip_network(jdcloud_cidr, strict=True)
        if isinstance(ip_network, ipaddress.IPv4Network):
            cloudflare_china_ipv4_subnets.append(ip_network)
        elif isinstance(ip_network, ipaddress.IPv6Network):
            cloudflare_china_ipv6_subnets.append(ip_network)
        else:
            raise ValueError(f"unexpected '{ip_network}' instance of class {ip_network.__class__.__name__}")
# }}}


# set_extra_subnets function {{{

extra_ipv4_subnets = None
extra_ipv6_subnets = None


def set_extra_subnets():
    global extra_ipv4_subnets
    global extra_ipv6_subnets
    extra_ipv4_subnets = list()
    extra_ipv6_subnets = list()
    for extra_cidr in sys.argv[1:]:
        ip_network = ipaddress.ip_network(extra_cidr, strict=True)
        if isinstance(ip_network, ipaddress.IPv4Network):
            extra_ipv4_subnets.append(ip_network)
        elif isinstance(ip_network, ipaddress.IPv6Network):
            extra_ipv6_subnets.append(ip_network)
        else:
            raise ValueError(f"unexpected '{ip_network}' instance of class {ip_network.__class__.__name__}")
# }}}


# Jinja2 templates {{{

nftables_allowed_ipv4 = """
set allowed_ipv4 {
    type ipv4_addr
    flags constant, interval
    auto-merge
    elements = {
{% for extra_ipv4_subnet in extra_ipv4_subnets %}
        {{ extra_ipv4_subnet }},
{% endfor %}
{% for cloudflare_ipv4_subnet in cloudflare_ipv4_subnets %}
        {{ cloudflare_ipv4_subnet }},
{% endfor %}
{% for cloudflare_china_ipv4_subnet in cloudflare_china_ipv4_subnets %}
        {{ cloudflare_china_ipv4_subnet }},
{% endfor %}
    }
}
"""

nftables_allowed_ipv6 = """
set allowed_ipv6 {
    type ipv6_addr
    flags constant, interval
    auto-merge
    elements = {
{% for extra_ipv6_subnet in extra_ipv6_subnets %}
        {{ extra_ipv6_subnet }},
{% endfor %}
{% for cloudflare_ipv6_subnet in cloudflare_ipv6_subnets %}
        {{ cloudflare_ipv6_subnet }},
{% endfor %}
{% for cloudflare_china_ipv6_subnet in cloudflare_china_ipv6_subnets %}
        {{ cloudflare_china_ipv6_subnet }},
{% endfor %}
    }
}
"""

# }}}


# main function {{{

def main():

    ipv4_filename = Path('/etc/sysconfig/nftables-allowed-ipv4.conf')
    ipv6_filename = Path('/etc/sysconfig/nftables-allowed-ipv6.conf')

    set_extra_subnets()
    set_cloudflare_subnets()

    environment = Environment(loader=BaseLoader(), keep_trailing_newline=True, trim_blocks=True, lstrip_blocks=True)
    ipv4_template = environment.from_string(nftables_allowed_ipv4)
    ipv6_template = environment.from_string(nftables_allowed_ipv6)

    old_ipv4_content = ipv4_filename.read_text() if ipv4_filename.is_file() else None
    new_ipv4_content = ipv4_template.render(
        extra_ipv4_subnets=extra_ipv4_subnets,
        cloudflare_ipv4_subnets=cloudflare_ipv4_subnets,
        cloudflare_china_ipv4_subnets=cloudflare_china_ipv4_subnets
    )

    old_ipv6_content = ipv6_filename.read_text() if ipv6_filename.is_file() else None
    new_ipv6_content = ipv6_template.render(
        extra_ipv6_subnets=extra_ipv6_subnets,
        cloudflare_ipv6_subnets=cloudflare_ipv6_subnets,
        cloudflare_china_ipv6_subnets=cloudflare_china_ipv6_subnets
    )

    if new_ipv4_content != old_ipv4_content or new_ipv6_content != old_ipv6_content:
        atomic_write_text(new_ipv4_content, ipv4_filename)
        atomic_write_text(new_ipv6_content, ipv6_filename)
        run('/etc/sysconfig/nftables.conf')


if __name__ == '__main__':
    main()

# }}}

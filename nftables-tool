#!/usr/bin/python3 -u

""" Generate /etc/sysconfig/nftables-allowed-ipv6.conf
"""

__contact__ = "https://github.com/makhomed/nftables-tool"
__license__ = "GNU General Public License version 3"
__version__ = "1.0.0"

# python -m pip install --upgrade-strategy eager --upgrade Jinja2 requests invoke

# includes {{{

from functools import wraps
from invoke import run
from jinja2 import Environment, BaseLoader
from pathlib import Path
import ipaddress
import json
import requests
import secrets

# }}}

# atomic_write_text function {{{

def atomic_write_text(content, filename):
    assert isinstance(content, str)
    assert isinstance(filename, Path)
    tmp_filename = filename.with_name(filename.name + '.tmp.' + secrets.token_hex() + '.tmp')
    tmp_filename.write_text(content)
    tmp_filename.rename(filename)

# }}}

# retry decorator {{{

def retry(max_retries=8, min_delay=1, backoff=2, max_delay=128):
    def decorator(func):
        @wraps(func)
        def wrapped_function(*args, **kwargs):
            last_exception = None
            delay = min_delay
            retries = 0
            while retries < max_retries:
                try:
                    return func(*args, **kwargs)
                except Exception as exception:
                    last_exception = exception
                    traceback.print_exc()
                    print(f"\n{retries+1} function call {func.__name__} failed. Will retry after delay {delay} seconds...\n")
                    time.sleep(delay)
                    delay *= backoff
                    if delay > max_delay: delay = max_delay
                    retries += 1
            raise last_exception
        return wrapped_function
    return decorator

# }}}

# Cloudflare API {{{

requests_connect_timeout = 10
requests_read_timeout = 10

@retry()
def api_cloudlare_get_ips():
    url = "https://api.cloudflare.com/client/v4/ips"
    timeout = ( requests_connect_timeout, requests_read_timeout )
    headers = { "Accept": "application/json" }
    params = { "networks": "jdcloud" }
    r = requests.get(url, params=params, headers=headers, timeout=timeout)
    assert r.status_code == 200, f"r.status_code == {r.status_code}"
    data = json.loads(r.text)
    success = data['success']
    errors = data['errors']
    messages = data['messages']
    result = data['result']
    assert success is True, f"success is {success}"
    assert isinstance(errors, list) and not errors, f"errors is {errors}"
    assert isinstance(messages, list) and not messages, f"messages is {messages}"
    return result
# }}}

# set_local_ipv6_subnets function {{{

local_ipv6_subnets = None

def set_local_ipv6_subnets():
    global local_ipv6_subnets
    local_ipv6_subnets = list()
    interfaces = json.loads(run("ip -json addr", hide=True).stdout)
    interfaces = [ interface for interface in interfaces if interface['link_type'] == 'ether' ]
    for interface in interfaces:
        for addr_info in interface['addr_info']:
            if addr_info['family'] != 'inet6': continue
            if addr_info['scope'] != 'global': continue
            address = ( addr_info['local'], addr_info['prefixlen'])
            local_ipv6_subnets.append(ipaddress.IPv6Interface(address).network)
# }}}

# set_cloudflare_subnets function {{{

cloudflare_etag = None
cloudflare_ipv4_subnets = None
cloudflare_ipv6_subnets = None
cloudflare_china_ipv4_subnets = None
cloudflare_china_ipv6_subnets = None

def set_cloudflare_subnets():
    global cloudflare_etag
    global cloudflare_ipv4_subnets
    global cloudflare_ipv6_subnets
    global cloudflare_china_ipv4_subnets
    global cloudflare_china_ipv6_subnets
    cloudflare_ipv4_subnets = list()
    cloudflare_ipv6_subnets = list()
    cloudflare_china_ipv4_subnets = list()
    cloudflare_china_ipv6_subnets = list()
    result = api_cloudlare_get_ips()
    cloudflare_etag = result['etag']
    for ipv4_cidr in result['ipv4_cidrs']:
        cloudflare_ipv4_subnets.append(ipaddress.IPv4Network(ipv4_cidr, strict=True))
    for ipv6_cidr in result['ipv6_cidrs']:
        cloudflare_ipv6_subnets.append(ipaddress.IPv6Network(ipv6_cidr, strict=True))
    for jdcloud_cidr in result['jdcloud_cidrs']:
        ip_network = ipaddress.ip_network(jdcloud_cidr, strict=True)
        if isinstance(ip_network, ipaddress.IPv4Network):
            cloudflare_china_ipv4_subnets.append(ip_network)
        elif isinstance(ip_network, ipaddress.IPv6Network):
            cloudflare_china_ipv6_subnets.append(ip_network)
        else:
            raise ValueError(f"unexpected instance of class {ip_network.__class__.__name__}")

# }}}

# nftables_allowed_ipv6 template {{{

nftables_allowed_ipv6 = """
set allowed_ipv6 {
    type ipv6_addr
    flags constant, interval
    auto-merge
    elements = {
{% for local_ipv6_subnet in local_ipv6_subnets %}
        {{ local_ipv6_subnet }},
{% endfor %}
{% for cloudflare_ipv6_subnet in cloudflare_ipv6_subnets %}
        {{ cloudflare_ipv6_subnet }},
{% endfor %}
{% for cloudflare_china_ipv6_subnet in cloudflare_china_ipv6_subnets %}
        {{ cloudflare_china_ipv6_subnet }},
{% endfor %}
    }
}
"""
# }}}

# main function {{{

filename = Path('/etc/sysconfig/nftables-allowed-ipv6.conf')

def main():
    set_local_ipv6_subnets()
    set_cloudflare_subnets()
    environment = Environment(loader=BaseLoader(), keep_trailing_newline=True, trim_blocks=True, lstrip_blocks=True)
    template = environment.from_string(nftables_allowed_ipv6)
    new_content = template.render(
        local_ipv6_subnets=local_ipv6_subnets,
        cloudflare_ipv6_subnets=cloudflare_ipv6_subnets,
        cloudflare_china_ipv6_subnets=cloudflare_china_ipv6_subnets
    )
    old_content = filename.read_text() if filename.is_file() else None
    if new_content != old_content:
        atomic_write_text(new_content, filename)
        run('/etc/sysconfig/nftables.conf')

if __name__ == '__main__':
    main() # }}}
